# This is an adapted version of the stock nvblas.conf that you should keep in your
# home directory or some other sensible location with your code. You should then
# set NVBLAS_CONFIG_FILE in your SLURM script to point to it.

# This is the configuration file to use NVBLAS Library
# Setup the environment variable NVBLAS_CONFIG_FILE to specify your own config file.
# By default, if NVBLAS_CONFIG_FILE is not defined,
# NVBLAS Library will try to open the file “nvblas.conf” in its current directory
# Example : NVBLAS_CONFIG_FILE /home/cuda_user/my_nvblas.conf
# The config file should have restricted write permissions accesses
# 
# # Specify which output log file (default is stderr)
# It is strongly advised to use full path to describe the location of the CPU Library

# BH: This needs to be set for the version of MKL you are using. After you module load,
# echo $MKLROOT to get the path to the mkl files, and then just reference the remainder
# as written. For the exercises in the workshop, this should just work.

NVBLAS_CPU_BLAS_LIB /opt/intel/compilers_and_libraries_2018.1.163/linux/mkl/lib/intel64/libmkl_rt.so 
# List of GPU devices Id to participate to the computation
# Use ALL if you want all your GPUs to contribute
# Use ALL0, if you want all your GPUs of the same type as device 0 to contribute
# However, NVBLAS consider that all GPU have the same performance and PCI bandwidth
# By default if no GPU are listed, only device 0 will be used
# NVBLAS_GPU_LIST 0 2 4

# BH: By default, I set it to use all available GPUs from your allocation, 
# though you'll probably only see benefits from one for NVBLAS usage.
NVBLAS_GPU_LIST ALL
NVBLAS_TILE_DIM 2048
NVBLAS_AUTOPIN_MEM_ENABLED

# BH: This might be worth experimenting with in terms of balancing use of 
# MKL library and GPU. Anything you disable will get offloaded to the CPU BLAS
# (here MKL).

# The current list of BLAS routines supported by NVBLAS are
# GEMM, SYRK, HERK, TRSM, TRMM, SYMM, HEMM, SYR2K, HER2K
#NVBLAS_GPU_DISABLED_SGEMM
#NVBLAS_GPU_DISABLED_DGEMM
#NVBLAS_GPU_DISABLED_CGEMM
#NVBLAS_GPU_DISABLED_ZGEMM
# Computation can be optionally hybridized between CPU and GPU
# By default, GPU-supported BLAS routines are ran fully on GPU
# The option NVBLAS_CPU_RATIO_<BLAS_ROUTINE>; give the ratio [0,1]
# of the amount of computation that should be done on CPU
# CAUTION : this option should be used wisely because it can actually
# significantly reduced the overall performance if too much work is given to CPU
#NVBLAS_CPU_RATIO_CGEMM 0.5
